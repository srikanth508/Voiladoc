import { TranslateLogHandler } from "./TranslateLogHandler";
import { TranslationLoader } from "./TranslationLoader";
import { PipeTransform, Type } from "@angular/core";
export declare const COMMON_PURE_PIPES: Array<Type<PipeTransform>>;
export declare const COMMON_PURE_PIPES_MAP: {
    [key: string]: Type<PipeTransform>;
};
export declare class TranslatorConfig {
    private logHandler;
    static navigator: any;
    private static isoRegEx;
    /**
     * Normalize a language
     *
     * @param {string} languageString
     * @returns {string}
     */
    private static normalizeLanguage;
    private options;
    private moduleName;
    private pipeMap;
    constructor(logHandler: TranslateLogHandler, options?: any, module?: string);
    readonly defaultLanguage: string;
    readonly providedLanguages: string[];
    readonly loader: Type<TranslationLoader>;
    readonly loaderOptions: any;
    readonly detectLanguage: boolean;
    readonly preferExactMatches: boolean;
    readonly navigatorLanguages: string[];
    readonly pipes: {
        [key: string]: Type<PipeTransform>;
    };
    /**
     * Overwrite the options.
     *
     * @param {any} options
     */
    setOptions(options: {
        [key: string]: any;
    }): void;
    /**
     * Checks if given language "language" is provided and returns the internal name.
     *
     * The checks running on normalized strings matching this pattern: /[a-z]{2}(-[A-Z]{2})?/
     * Transformation is done with this pattern: /^([A-Za-z]{2})([\.\-_\/]?([A-Za-z]{2}))?/
     *
     * If strict is false it checks country independent.
     *
     * @param {string} language
     * @param {boolean?} strict
     * @returns {string|boolean}
     */
    providedLanguage(language: string, strict?: boolean): string | boolean;
    /**
     * Get the configuration for module.
     *
     * @param {string} module
     * @returns {TranslatorConfig}
     */
    module(module: string): TranslatorConfig;
}
