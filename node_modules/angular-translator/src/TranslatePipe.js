var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { TranslateLogHandler } from "./TranslateLogHandler";
import { Translator } from "./Translator";
import { TranslatorContainer } from "./TranslatorContainer";
import { Pipe } from "@angular/core";
var TranslatePipe = /** @class */ (function () {
    function TranslatePipe(translator, translatorContainer, logHandler) {
        var _this = this;
        this.translator = translator;
        this.translatorContainer = translatorContainer;
        this.logHandler = logHandler;
        this.translation = "";
        this.subscription = this.translator.languageChanged.subscribe(function () {
            _this.startTranslation();
        });
    }
    TranslatePipe_1 = TranslatePipe;
    TranslatePipe._parseParams = function (arg) {
        try {
            var o = eval("(" + arg + ")");
            if (typeof o === "object") {
                return o;
            }
        }
        catch (e) {
        }
        return {};
    };
    /**
     * Translates key with given args.
     *
     * @see TranslateService.translator
     * @param {string} key
     * @param {object} params
     * @param {string?} module
     * @returns {string}
     */
    TranslatePipe.prototype.transform = function (key, params, module) {
        if (params === void 0) { params = {}; }
        if (module) {
            this.module = module;
        }
        // backward compatibility: highly deprecated
        if (params instanceof Array) {
            params = params[0];
            if (typeof params === "string") {
                params = TranslatePipe_1._parseParams(params);
            }
        }
        if (this.translated && this.promise &&
            (this.translated.key !== key ||
                JSON.stringify(this.translated.params) !== JSON.stringify(params) ||
                this.translated.module !== module)) {
            this.promise = null;
        }
        if (!this.promise) {
            this.translated = {
                key: key,
                params: params,
                module: module,
            };
            this.startTranslation();
        }
        return this.translation;
    };
    Object.defineProperty(TranslatePipe.prototype, "module", {
        set: function (module) {
            var _this = this;
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
            this.translator = this.translatorContainer.getTranslator(module);
            this.subscription = this.translator.languageChanged.subscribe(function () {
                _this.startTranslation();
            });
        },
        enumerable: true,
        configurable: true
    });
    TranslatePipe.prototype.startTranslation = function () {
        var _this = this;
        if (!this.translated || !this.translated.key) {
            return;
        }
        this.promise = this.translator.translate(this.translated.key, this.translated.params);
        this.promise.then(function (translation) { return _this.translation = String(translation); });
    };
    var TranslatePipe_1;
    TranslatePipe.pipeName = "translate";
    TranslatePipe = TranslatePipe_1 = __decorate([
        Pipe({
            name: "translate",
            pure: false,
        }),
        __metadata("design:paramtypes", [Translator,
            TranslatorContainer,
            TranslateLogHandler])
    ], TranslatePipe);
    return TranslatePipe;
}());
export { TranslatePipe };
//# sourceMappingURL=TranslatePipe.js.map