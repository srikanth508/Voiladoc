var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { TranslateLogHandler } from "./TranslateLogHandler";
import { Translator } from "./Translator";
import { TranslatorConfig } from "./TranslatorConfig";
import { Injectable, Injector } from "@angular/core";
import { Observable } from "rxjs";
import { share } from "rxjs/operators";
var TranslatorContainer = /** @class */ (function () {
    function TranslatorContainer(config, logHandler, injector) {
        var _this = this;
        this.config = config;
        this.logHandler = logHandler;
        this.injector = injector;
        this._language = "en";
        this.translators = {};
        this._language = config.defaultLanguage;
        if (config.detectLanguage) {
            this.detectLanguage();
        }
        this.languageChangedObservable = new Observable(function (observer) {
            _this.languageChangedObserver = observer;
        }).pipe(share());
    }
    Object.defineProperty(TranslatorContainer.prototype, "languageChanged", {
        get: function () {
            return this.languageChangedObservable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslatorContainer.prototype, "language", {
        get: function () {
            return this._language;
        },
        set: function (language) {
            var providedLanguage = this.config.providedLanguage(language, true);
            if (typeof providedLanguage === "string") {
                this._language = providedLanguage;
                // only when someone subscribes the observer get created
                if (this.languageChangedObserver) {
                    this.languageChangedObserver.next(providedLanguage);
                }
            }
            else {
                throw new Error("Language " + language + " not provided");
            }
        },
        enumerable: true,
        configurable: true
    });
    TranslatorContainer.prototype.getTranslator = function (module) {
        if (!this.translators[module]) {
            this.translators[module] = new Translator(module, this.injector);
        }
        return this.translators[module];
    };
    /**
     * Detects the preferred language.
     *
     * Returns false if the user prefers a language that is not provided or
     * true.
     *
     * @returns {boolean}
     */
    TranslatorContainer.prototype.detectLanguage = function () {
        var _this = this;
        var providedLanguage;
        var i;
        var detected = function (language) {
            _this._language = language;
            _this.logHandler.info("Language " + language + " got detected");
            return true;
        };
        if (this.config.preferExactMatches) {
            this.logHandler.debug("Detecting language from " + JSON.stringify(this.config.navigatorLanguages) + " in strict mode");
            for (i = 0; i < this.config.navigatorLanguages.length; i++) {
                providedLanguage = this.config.providedLanguage(this.config.navigatorLanguages[i], true);
                if (typeof providedLanguage === "string") {
                    this.logHandler.debug("Detected " + providedLanguage + " by " + this.config.navigatorLanguages[i]);
                    return detected(providedLanguage);
                }
                else {
                    this.logHandler.debug("Language " + this.config.navigatorLanguages[i] + " is not provided");
                }
            }
        }
        this.logHandler.debug("Detecting language from " + JSON.stringify(this.config.navigatorLanguages) + " in non-strict mode");
        for (i = 0; i < this.config.navigatorLanguages.length; i++) {
            providedLanguage = this.config.providedLanguage(this.config.navigatorLanguages[i]);
            if (typeof providedLanguage === "string") {
                this.logHandler.debug("Detected " + providedLanguage + " by " + this.config.navigatorLanguages[i]);
                return detected(providedLanguage);
            }
            else {
                this.logHandler.debug("Language " + this.config.navigatorLanguages[i] + " is not provided");
            }
        }
        this.logHandler.debug("No language got detected - using default language");
        return false;
    };
    TranslatorContainer = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [TranslatorConfig,
            TranslateLogHandler,
            Injector])
    ], TranslatorContainer);
    return TranslatorContainer;
}());
export { TranslatorContainer };
//# sourceMappingURL=TranslatorContainer.js.map