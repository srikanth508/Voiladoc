{"version":3,"file":"ngx-dropzone.js.map","sources":["ng://ngx-dropzone/lib/ngx-dropzone.service.ts","ng://ngx-dropzone/lib/ngx-dropzone.component.ts","ng://ngx-dropzone/lib/ngx-dropzone.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nexport interface FilePreview {\n  data: string | ArrayBuffer;\n  filename: string;\n}\n\nexport interface FileSelectResult {\n  addedFiles: File[];\n  rejectedFiles: File[];\n}\n\n/**\n * UPDATE 04.04.2019:\n * Refactored to use service class to handle any\n * logic on the dropped files to allow for easier\n * unit tests and separation of concerns.\n */\n@Injectable()\nexport class NgxDropzoneService {\n\n  constructor() { }\n\n  private fileCache: File[] = [];\n  private rejectedFiles: File[] = [];\n  previews: FilePreview[] = [];\n\n  reset() {\n    this.fileCache = [];\n    this.rejectedFiles = [];\n    this.previews = [];\n  }\n\n  async parseFileList(files: FileList, accept: string, maxFileSize: number, multiple: boolean,\n    preserveFiles: boolean, showPreviews: boolean): Promise<FileSelectResult> {\n\n    /**\n     * UPDATE 27.01.2019:\n     * Refactored the filter algorithm into one filter() method to gain\n     * better performance by iterating only once.\n     * See issue #1.\n     *\n     * UPDATE 09.03.2019:\n     * Refactored to one single loop and fixed bug where disabled multiple\n     * selection might return invalid (unfiltered) files.\n     * Added image preview option.\n     *\n     * UPDATE 12.03.2019:\n     * Refactored to use fileCache and emit all dropped files\n     * since the last reset if [preserveFiles] is true.\n     */\n    const hasFiletypeFilter = accept !== '*';\n\n    /**\n     * UPDATE 12.03.2019:\n     * Added option to preserve preview images.\n     */\n    if (!preserveFiles) {\n      this.fileCache = [];\n      this.rejectedFiles = [];\n      this.previews = [];\n    }\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files.item(i);\n\n      if (hasFiletypeFilter) {\n        if (accept.endsWith('/*')) {\n          // If a generic file type is provided, we check for a match.\n          if (accept.split('/')[0] !== file.type.split('/')[0]) {\n            this.rejectedFiles.push(file);\n            continue;\n          }\n        } else {\n          // Else an exact match is required.\n          if (!accept.includes(file.type)) {\n            this.rejectedFiles.push(file);\n            continue;\n          }\n        }\n      }\n\n      if (maxFileSize && file.size > maxFileSize) {\n        this.rejectedFiles.push(file);\n        continue;\n      }\n\n      if (!multiple && this.fileCache.length >= 1) {\n        if (!preserveFiles) {\n          // Always emit the latest file if multi-selection and preservation are disabled.\n          this.fileCache = [file];\n        } else {\n          continue;\n        }\n      }\n\n      if (showPreviews) {\n        if (file.type.startsWith('image')) {\n          const preview = await this.readFile(file);\n\n          if (preview) {\n            this.previews.push(preview);\n          }\n        } else {\n          const preview: FilePreview = {\n            data: null,\n            filename: file.name\n          };\n\n          this.previews.push(preview);\n        }\n      }\n\n      this.fileCache.push(file);\n    }\n\n    const result: FileSelectResult = {\n      addedFiles: this.fileCache,\n      rejectedFiles: this.rejectedFiles\n    };\n\n    return result;\n  }\n\n  private async readFile(file: File): Promise<FilePreview> {\n    return new Promise<FilePreview>((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        const preview: FilePreview = {\n          data: (e.target as FileReader).result,\n          filename: file.name\n        };\n\n        return resolve(preview);\n      };\n\n      reader.onerror = e => {\n        console.error(`FileReader failed on file ${file.name}. No preview image created.`);\n        return reject(null);\n      }\n\n      reader.readAsDataURL(file);\n    })\n  }\n}\n","import {\n  Component,\n  Input, Output, ElementRef, ViewChild,\n  AfterViewInit, EventEmitter, TemplateRef,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding\n} from '@angular/core';\nimport { NgxDropzoneService, FilePreview, FileSelectResult } from './ngx-dropzone.service';\nimport { resolve } from 'url';\n\n@Component({\n  selector: 'ngx-dropzone',\n  template: `<input type=\"file\" #fileInput class=\"file-input\" (change)=\"onFilesSelected($event)\" [multiple]=\"multiple\"\n  [accept]=\"accept\" />\n<div class=\"dropzone\" (click)=\"showFileSelector()\">\n  <p *ngIf=\"service.previews.length === 0\">{{ label }}</p>\n  <div class=\"preview\" [class.limit-width]=\"!p.data\" *ngFor=\"let p of service.previews\">\n    <img *ngIf=\"p.data\" [src]=\"p.data\">\n    <span *ngIf=\"p.data\">{{ p.filename }}</span>\n    <div *ngIf=\"!p.data\" class=\"preview-item\">\n      <span>{{ p.filename }}</span>\n    </div>\n  </div>\n</div>\n`,\n  styles: [`:host(){display:flex;height:180px;cursor:pointer;background:#fff;color:#717386;border:2px dashed #717386;border-radius:5px;font-size:16px}:host().hovered{border:2px solid #717386;color:#dfdfe4}:host().disabled{opacity:.5;cursor:no-drop}:host()>.dropzone{display:flex;flex-direction:row;justify-content:flex-start;align-items:center;width:100%;overflow-x:auto}:host()>.dropzone>p{margin:10px auto}:host()>.dropzone>.preview{height:80%;position:relative;text-align:center;padding:0 10px;width:-webkit-max-content;width:-moz-max-content;width:max-content}:host()>.dropzone>.preview.limit-width{max-width:25%}:host()>.dropzone>.preview>img{max-height:100%;border-radius:5px;opacity:.8}:host()>.dropzone>.preview>span{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);color:#fff}:host()>.dropzone>.preview>.preview-item{display:flex;text-align:center;align-items:center;height:100%;padding:0 40px;overflow-wrap:break-word;border-radius:5px;background-image:linear-gradient(to top,#ededed,#efefef,#f1f1f1,#f4f4f4,#f6f6f6)}:host()>.dropzone>.preview>.preview-item>span{color:#717386;max-width:100%}.file-input{display:none}`],\n  providers: [NgxDropzoneService] // Create a new service instance for each component.\n})\nexport class NgxDropzoneComponent {\n\n  constructor(\n    private host: ElementRef,\n    public service: NgxDropzoneService\n  ) { }\n\n  @Input() label = 'Drop your files here (or click)';\n  @Input() multiple = true;\n  @Input() accept = '*';\n  @Input() maxFileSize: number;\n  @Input() showPreviews = false;\n  @Input() preserveFiles = true;\n\n  @Output() filesAdded = new EventEmitter<File[]>();\n  @Output() filesRejected = new EventEmitter<File[]>();\n\n  @HostBinding('class.disabled') @Input() disabled = false;\n  @HostBinding('class.hovered') hovered = false;\n\n  @ViewChild('fileInput') private fileInput: ElementRef;\n\n  showFileSelector() {\n    if (!this.disabled) {\n      this.fileInput.nativeElement.click();\n    }\n  }\n\n  reset() {\n    this.service.reset();\n  }\n\n  onFilesSelected(event) {\n    const files: FileList = event.target.files;\n\n    this.handleFileDrop(files).then(() => {\n      // Reset the file input value to trigger the event on new selection.\n      (this.fileInput.nativeElement as HTMLInputElement).value = '';\n    });\n  }\n\n  /**\n   * UPDATE 10.03.2019:\n   * Refactored to use HostListener and HostBindings to allow\n   * for easier style overwriting from outside the component.\n   */\n  @HostListener('dragover', ['$event'])\n  onDragOver(event) {\n    if (this.disabled) {\n      return;\n    }\n\n    this.preventDefault(event);\n    this.hovered = true;\n  }\n\n  @HostListener('dragleave', ['$event'])\n  onDragLeave(event) {\n    this.hovered = false;\n  }\n\n  @HostListener('drop', ['$event'])\n  onDrop(event) {\n    this.preventDefault(event);\n    this.hovered = false;\n    this.handleFileDrop(event.dataTransfer.files);\n  }\n\n  private async handleFileDrop(files: FileList): Promise<void> {\n    return new Promise<void>(resolve => {\n      if (this.disabled) {\n        return;\n      }\n\n      this.service.parseFileList(files, this.accept, this.maxFileSize,\n        this.multiple, this.preserveFiles, this.showPreviews)\n        .then((result: FileSelectResult) => {\n          this.filesAdded.next(result.addedFiles);\n\n          if (result.rejectedFiles.length) {\n            this.filesRejected.next(result.rejectedFiles);\n          }\n\n          resolve();\n        });\n    });\n  }\n\n  private preventDefault(event: DragEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxDropzoneComponent } from './ngx-dropzone.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxDropzoneComponent\n  ],\n  exports: [\n    NgxDropzoneComponent\n  ]\n})\nexport class NgxDropzoneModule { }\n"],"names":[],"mappings":"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"}
