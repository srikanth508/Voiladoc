/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, IterableDiffers, Output, } from '@angular/core';
import { Calendar, Draggable, formatDate } from 'fullcalendar';
// declare const FullCalendar: any;
/** @type {?} */
var defaultConfig = {
    aspectRatio: 1.35,
    defaultView: 'month',
    fixedWeekCount: true,
    showNonCurrentDates: true,
    allDaySlot: true,
    allDayText: 'all-day',
    slotDuration: '00:30:00',
    scrollTime: '06:00:00',
    minTime: '00:00:00',
    maxTime: '24:00:00',
    slotEventOverlap: true,
    dragRevertDuration: 500,
    dragOpacity: .75,
    dragScroll: true,
    timeZone: 'local',
    titleFormat: {
        year: 'numeric',
        month: 'long'
    },
    titleRangeSeparator: ' \u2013 ',
    defaultRangeSeparator: ' - ',
    dir: 'ltr',
    defaultTimedEventDuration: '01:00',
    defaultAllDayEventDuration: { days: 1 },
    eventOrder: 'start,-duration,allDay,title',
    rerenderDelay: null
};
var FullCalendarComponent = /** @class */ (function () {
    function FullCalendarComponent(el, differs) {
        this.el = el;
        // tslint:disable:no-output-on-prefix
        this.onDateClick = new EventEmitter();
        this.onDrop = new EventEmitter();
        this.onEventClick = new EventEmitter();
        this.onEventMouseEnter = new EventEmitter();
        this.onEventMouseLeave = new EventEmitter();
        this.onEventDragStart = new EventEmitter();
        this.onEventDragStop = new EventEmitter();
        this.onEventDrop = new EventEmitter();
        this.onEventReceive = new EventEmitter();
        this.onEventResizeStart = new EventEmitter();
        this.onEventResizeStop = new EventEmitter();
        this.onEventResize = new EventEmitter();
        this.onDatesRender = new EventEmitter();
        this.onDatesDestroy = new EventEmitter();
        this.onViewSkeletonRender = new EventEmitter();
        this.onViewSkeletonDestroy = new EventEmitter();
        this.onNavLinkDayClick = new EventEmitter();
        this.onNavLinkWeekClick = new EventEmitter();
        this.onEventRender = new EventEmitter();
        this.onEventDestroy = new EventEmitter();
        this.onEventPositioned = new EventEmitter();
        this.onDayRender = new EventEmitter();
        this.onSelect = new EventEmitter();
        this.onUnselect = new EventEmitter();
        this.onResourceRender = new EventEmitter();
        this.eventDiffer = differs.find([]).create(null);
        this.resourceDiffer = differs.find([]).create(null);
        this.initialized = false;
    }
    /**
     * @return {?}
     */
    FullCalendarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.config = this.safeGenerateConfig();
        this.config.resources = function (fetchInfo, successCallback, failureCallback) {
            successCallback(_this.resources || []);
        };
        this.config.dateClick = function (dateClickInfo) {
            _this.onDateClick.emit(dateClickInfo);
        };
        this.config.dayRender = function (dayRenderInfo) {
            _this.onDayRender.emit(dayRenderInfo);
        };
        this.config.drop = function (dropInfo) {
            _this.onDrop.emit(dropInfo);
        };
        this.config.eventClick = function (eventClickInfo) {
            _this.onEventClick.emit(eventClickInfo);
        };
        this.config.eventMouseEnter = function (mouseEnterInfo) {
            _this.onEventMouseEnter.emit(mouseEnterInfo);
        };
        this.config.eventMouseLeave = function (mouseLeaveInfo) {
            _this.onEventMouseLeave.emit(mouseLeaveInfo);
        };
        this.config.eventDragStart = function (info) {
            _this.onEventDragStart.emit(info);
        };
        this.config.eventDragStop = function (info) {
            _this.onEventDragStop.emit(info);
        };
        this.config.eventDrop = function (eventDropInfo) {
            _this._updateEvent(eventDropInfo.event);
            _this.onEventDrop.emit(eventDropInfo);
        };
        this.config.eventReceive = function (info) {
            _this.onEventReceive.emit(info);
        };
        this.config.eventResizeStart = function (info) {
            _this.onEventResizeStart.emit(info);
        };
        this.config.eventResizeStop = function (info) {
            _this.onEventResizeStop.emit(info);
        };
        this.config.eventResize = function (eventResizeInfo) {
            _this._updateEvent(eventResizeInfo.event);
            _this.onEventResize.emit(eventResizeInfo);
        };
        this.config.datesRender = function (info) {
            _this.onDatesRender.emit({
                'info': info
            });
        };
        this.config.datesDestroy = function (info) {
            _this.onDatesDestroy.emit({
                'info': info
            });
        };
        this.config.viewSkeletonRender = function (info) {
            _this.onViewSkeletonRender.emit({
                'info': info
            });
        };
        this.config.viewSkeletonDestroy = function (info) {
            _this.onViewSkeletonDestroy.emit({
                'info': info
            });
        };
        this.config.navLinkDayClick = function (date, jsEvent) {
            _this.onNavLinkDayClick.emit({
                'date': date,
                'jsEvent': jsEvent
            });
        };
        this.config.navLinkWeekClick = function (weekStart, jsEvent) {
            _this.onNavLinkWeekClick.emit({
                'weekStart': weekStart,
                'jsEvent': jsEvent
            });
        };
        this.config.eventRender = function (info) {
            _this.onEventRender.emit(info);
        };
        this.config.eventDestroy = function (info) {
            _this.onEventDestroy.emit(info);
        };
        this.config.eventPositioned = function (info) {
            _this.onEventPositioned.emit(info);
        };
        this.config.select = function (selectionInfo) {
            _this.onSelect.emit(selectionInfo);
        };
        this.config.unselect = function (jsEvent, view) {
            _this.onUnselect.emit({
                'jsEvent': jsEvent,
                'view': view
            });
        };
        this.config.resourceRender = function (renderInfo) {
            _this.onResourceRender.emit(renderInfo);
        };
    };
    /**
     * @return {?}
     */
    FullCalendarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.calendar) {
            this.calendar.destroy();
            this.initialized = false;
            this.calendar = null;
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FullCalendarComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.calendar) {
            for (var propName in changes) {
                if (propName !== 'events') {
                    this.calendar.option(propName, changes[propName].currentValue);
                }
            }
        }
    };
    /**
     * @return {?}
     */
    FullCalendarComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        if (!this.initialized && this.el.nativeElement.offsetParent) {
            this.initialize();
        }
    };
    /**
     * @return {?}
     */
    FullCalendarComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var eventChanges = this.eventDiffer.diff(this.events);
        if (this.calendar && eventChanges) {
            this.calendar.removeEventSources();
            if (this.events) {
                this.calendar.addEventSource(this.events);
            }
        }
        /** @type {?} */
        var resourceChanges = this.resourceDiffer.diff(this.resources);
        if (this.calendar && resourceChanges) {
            this.calendar.refetchResources();
        }
    };
    /**
     * @private
     * @return {?}
     */
    FullCalendarComponent.prototype.initialize = /**
     * @private
     * @return {?}
     */
    function () {
        this.calendar = new Calendar(this.el.nativeElement, this.config);
        this.calendar.render();
        if (!!this.draggableEl || !!this.containerEl) {
            if (!!this.draggableEl) {
                // tslint:disable-next-line:no-unused-expression
                new Draggable(this.draggableEl);
            }
            else if (this.containerEl) {
                // tslint:disable-next-line:no-unused-expression
                new Draggable(this.containerEl, {
                    itemSelector: this.itemSelector
                });
            }
        }
        if (this.events) {
            this.calendar.addEventSource(this.events);
        }
        this.initialized = true;
    };
    /**
     * @private
     * @return {?}
     */
    FullCalendarComponent.prototype.safeGenerateConfig = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var configFromAttrs = {
            // tslint:disable:no-non-null-assertion
            header: (/** @type {?} */ (this.header)),
            weekends: (/** @type {?} */ (this.weekends)),
            hiddenDays: (/** @type {?} */ (this.hiddenDays)),
            fixedWeekCount: (/** @type {?} */ (this.fixedWeekCount)),
            weekNumbers: (/** @type {?} */ (this.weekNumbers)),
            businessHours: (/** @type {?} */ (this.businessHours)),
            height: (/** @type {?} */ (this.height)),
            contentHeight: (/** @type {?} */ (this.contentHeight)),
            aspectRatio: (/** @type {?} */ (this.aspectRatio)),
            eventLimit: (/** @type {?} */ (this.eventLimit)),
            defaultDate: (/** @type {?} */ (this.defaultDate)),
            locale: (/** @type {?} */ (this.locale)),
            timeZone: (/** @type {?} */ (this.timeZone)),
            eventTimeFormat: (/** @type {?} */ (this.eventTimeFormat)),
            editable: (/** @type {?} */ (this.editable)),
            droppable: (/** @type {?} */ (this.droppable)),
            eventStartEditable: (/** @type {?} */ (this.eventStartEditable)),
            eventDurationEditable: (/** @type {?} */ (this.eventDurationEditable)),
            defaultView: (/** @type {?} */ (this.defaultView)),
            allDaySlot: (/** @type {?} */ (this.allDaySlot)),
            allDayText: (/** @type {?} */ (this.allDayText)),
            slotDuration: (/** @type {?} */ (this.slotDuration)),
            slotLabelInterval: (/** @type {?} */ (this.slotLabelInterval)),
            snapDuration: (/** @type {?} */ (this.snapDuration)),
            scrollTime: (/** @type {?} */ (this.scrollTime)),
            minTime: (/** @type {?} */ (this.minTime)),
            maxTime: (/** @type {?} */ (this.maxTime)),
            slotEventOverlap: (/** @type {?} */ (this.slotEventOverlap)),
            nowIndicator: (/** @type {?} */ (this.nowIndicator)),
            dragRevertDuration: (/** @type {?} */ (this.dragRevertDuration)),
            dragOpacity: (/** @type {?} */ (this.dragOpacity)),
            dragScroll: (/** @type {?} */ (this.dragScroll)),
            eventOverlap: (/** @type {?} */ (this.eventOverlap)),
            eventConstraint: (/** @type {?} */ (this.eventConstraint)),
            dayRender: (/** @type {?} */ (this.dayRender)),
            navLinks: (/** @type {?} */ (this.navLinks)),
            // new in v4
            titleFormat: (/** @type {?} */ (this.titleFormat)),
            titleRangeSeparator: (/** @type {?} */ (this.titleRangeSeparator)),
            defaultRangeSeparator: (/** @type {?} */ (this.defaultRangeSeparator)),
            dir: (/** @type {?} */ (this.dir)),
            defaultTimedEventDuration: (/** @type {?} */ (this.defaultTimedEventDuration)),
            defaultAllDayEventDuration: (/** @type {?} */ (this.defaultAllDayEventDuration)),
            showNonCurrentDates: (/** @type {?} */ (this.showNonCurrentDates)),
            columnHeaderFormat: (/** @type {?} */ (this.columnHeaderFormat)),
            slotLabelFormat: (/** @type {?} */ (this.slotLabelFormat)),
            columnHeaderText: (/** @type {?} */ (this.columnHeaderText)),
            nextDayThreshold: (/** @type {?} */ (this.nextDayThreshold)),
            eventOrder: (/** @type {?} */ (this.eventOrder)),
            rerenderDelay: (/** @type {?} */ (this.rerenderDelay)),
            progressiveEventRendering: (/** @type {?} */ (this.progressiveEventRendering)),
            eventResizableFromStart: (/** @type {?} */ (this.eventResizableFromStart)),
            eventDragMinDistance: (/** @type {?} */ (this.eventDragMinDistance)),
            allDayMaintainDuration: (/** @type {?} */ (this.allDayMaintainDuration)),
            listDayFormat: (/** @type {?} */ (this.listDayFormat)),
            listDayAltFormat: (/** @type {?} */ (this.listDayAltFormat)),
        };
        return tslib_1.__assign({}, defaultConfig, this.removeUndefinedProperties(this.options), this.removeUndefinedProperties(configFromAttrs));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    FullCalendarComponent.prototype._updateEvent = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        console.log(event);
        /** @type {?} */
        var sourceEvent = this._findEvent(event.id);
        if (sourceEvent) {
            sourceEvent.start = formatDate(event.start);
            if (event.end) {
                sourceEvent.end = formatDate(event.end);
            }
            if (event.resourceId) {
                sourceEvent.resourceId = event.resourceId;
            }
        }
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    FullCalendarComponent.prototype._findEvent = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var e_1, _a;
        /** @type {?} */
        var event;
        if (this.events) {
            try {
                for (var _b = tslib_1.__values(this.events), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var e = _c.value;
                    if (e.id === id) {
                        event = e;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return event;
    };
    /**
     * @template T
     * @param {?} object
     * @return {?}
     */
    FullCalendarComponent.prototype.removeUndefinedProperties = /**
     * @template T
     * @param {?} object
     * @return {?}
     */
    function (object) {
        return JSON.parse(JSON.stringify(typeof object === 'object' ? object : {}));
    };
    FullCalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-fullcalendar',
                    template: " "
                }] }
    ];
    /** @nocollapse */
    FullCalendarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: IterableDiffers }
    ]; };
    FullCalendarComponent.propDecorators = {
        draggableEl: [{ type: Input }],
        containerEl: [{ type: Input }],
        itemSelector: [{ type: Input }],
        options: [{ type: Input }],
        events: [{ type: Input }],
        resources: [{ type: Input }],
        header: [{ type: Input }],
        weekends: [{ type: Input }],
        hiddenDays: [{ type: Input }],
        fixedWeekCount: [{ type: Input }],
        weekNumbers: [{ type: Input }],
        businessHours: [{ type: Input }],
        height: [{ type: Input }],
        contentHeight: [{ type: Input }],
        aspectRatio: [{ type: Input }],
        eventLimit: [{ type: Input }],
        defaultDate: [{ type: Input }],
        editable: [{ type: Input }],
        droppable: [{ type: Input }],
        eventStartEditable: [{ type: Input }],
        eventDurationEditable: [{ type: Input }],
        defaultView: [{ type: Input }],
        allDaySlot: [{ type: Input }],
        allDayText: [{ type: Input }],
        slotDuration: [{ type: Input }],
        slotLabelInterval: [{ type: Input }],
        snapDuration: [{ type: Input }],
        scrollTime: [{ type: Input }],
        minTime: [{ type: Input }],
        maxTime: [{ type: Input }],
        slotEventOverlap: [{ type: Input }],
        nowIndicator: [{ type: Input }],
        dragRevertDuration: [{ type: Input }],
        dragOpacity: [{ type: Input }],
        dragScroll: [{ type: Input }],
        eventOverlap: [{ type: Input }],
        eventConstraint: [{ type: Input }],
        locale: [{ type: Input }],
        timeZone: [{ type: Input }],
        eventTimeFormat: [{ type: Input }],
        dayRender: [{ type: Input }],
        navLinks: [{ type: Input }],
        titleFormat: [{ type: Input }],
        titleRangeSeparator: [{ type: Input }],
        defaultRangeSeparator: [{ type: Input }],
        dir: [{ type: Input }],
        defaultTimedEventDuration: [{ type: Input }],
        defaultAllDayEventDuration: [{ type: Input }],
        showNonCurrentDates: [{ type: Input }],
        columnHeaderFormat: [{ type: Input }],
        slotLabelFormat: [{ type: Input }],
        columnHeaderText: [{ type: Input }],
        nextDayThreshold: [{ type: Input }],
        eventOrder: [{ type: Input }],
        rerenderDelay: [{ type: Input }],
        progressiveEventRendering: [{ type: Input }],
        eventResizableFromStart: [{ type: Input }],
        eventDragMinDistance: [{ type: Input }],
        allDayMaintainDuration: [{ type: Input }],
        listDayFormat: [{ type: Input }],
        listDayAltFormat: [{ type: Input }],
        onDateClick: [{ type: Output }],
        onDrop: [{ type: Output }],
        onEventClick: [{ type: Output }],
        onEventMouseEnter: [{ type: Output }],
        onEventMouseLeave: [{ type: Output }],
        onEventDragStart: [{ type: Output }],
        onEventDragStop: [{ type: Output }],
        onEventDrop: [{ type: Output }],
        onEventReceive: [{ type: Output }],
        onEventResizeStart: [{ type: Output }],
        onEventResizeStop: [{ type: Output }],
        onEventResize: [{ type: Output }],
        onDatesRender: [{ type: Output }],
        onDatesDestroy: [{ type: Output }],
        onViewSkeletonRender: [{ type: Output }],
        onViewSkeletonDestroy: [{ type: Output }],
        onNavLinkDayClick: [{ type: Output }],
        onNavLinkWeekClick: [{ type: Output }],
        onEventRender: [{ type: Output }],
        onEventDestroy: [{ type: Output }],
        onEventPositioned: [{ type: Output }],
        onDayRender: [{ type: Output }],
        onSelect: [{ type: Output }],
        onUnselect: [{ type: Output }],
        onResourceRender: [{ type: Output }]
    };
    return FullCalendarComponent;
}());
export { FullCalendarComponent };
if (false) {
    /** @type {?} */
    FullCalendarComponent.prototype.draggableEl;
    /** @type {?} */
    FullCalendarComponent.prototype.containerEl;
    /** @type {?} */
    FullCalendarComponent.prototype.itemSelector;
    /** @type {?} */
    FullCalendarComponent.prototype.options;
    /** @type {?} */
    FullCalendarComponent.prototype.events;
    /** @type {?} */
    FullCalendarComponent.prototype.resources;
    /** @type {?} */
    FullCalendarComponent.prototype.header;
    /** @type {?} */
    FullCalendarComponent.prototype.weekends;
    /** @type {?} */
    FullCalendarComponent.prototype.hiddenDays;
    /** @type {?} */
    FullCalendarComponent.prototype.fixedWeekCount;
    /** @type {?} */
    FullCalendarComponent.prototype.weekNumbers;
    /** @type {?} */
    FullCalendarComponent.prototype.businessHours;
    /** @type {?} */
    FullCalendarComponent.prototype.height;
    /** @type {?} */
    FullCalendarComponent.prototype.contentHeight;
    /** @type {?} */
    FullCalendarComponent.prototype.aspectRatio;
    /** @type {?} */
    FullCalendarComponent.prototype.eventLimit;
    /** @type {?} */
    FullCalendarComponent.prototype.defaultDate;
    /** @type {?} */
    FullCalendarComponent.prototype.editable;
    /** @type {?} */
    FullCalendarComponent.prototype.droppable;
    /** @type {?} */
    FullCalendarComponent.prototype.eventStartEditable;
    /** @type {?} */
    FullCalendarComponent.prototype.eventDurationEditable;
    /** @type {?} */
    FullCalendarComponent.prototype.defaultView;
    /** @type {?} */
    FullCalendarComponent.prototype.allDaySlot;
    /** @type {?} */
    FullCalendarComponent.prototype.allDayText;
    /** @type {?} */
    FullCalendarComponent.prototype.slotDuration;
    /** @type {?} */
    FullCalendarComponent.prototype.slotLabelInterval;
    /** @type {?} */
    FullCalendarComponent.prototype.snapDuration;
    /** @type {?} */
    FullCalendarComponent.prototype.scrollTime;
    /** @type {?} */
    FullCalendarComponent.prototype.minTime;
    /** @type {?} */
    FullCalendarComponent.prototype.maxTime;
    /** @type {?} */
    FullCalendarComponent.prototype.slotEventOverlap;
    /** @type {?} */
    FullCalendarComponent.prototype.nowIndicator;
    /** @type {?} */
    FullCalendarComponent.prototype.dragRevertDuration;
    /** @type {?} */
    FullCalendarComponent.prototype.dragOpacity;
    /** @type {?} */
    FullCalendarComponent.prototype.dragScroll;
    /** @type {?} */
    FullCalendarComponent.prototype.eventOverlap;
    /** @type {?} */
    FullCalendarComponent.prototype.eventConstraint;
    /** @type {?} */
    FullCalendarComponent.prototype.locale;
    /** @type {?} */
    FullCalendarComponent.prototype.timeZone;
    /** @type {?} */
    FullCalendarComponent.prototype.eventTimeFormat;
    /** @type {?} */
    FullCalendarComponent.prototype.dayRender;
    /** @type {?} */
    FullCalendarComponent.prototype.navLinks;
    /** @type {?} */
    FullCalendarComponent.prototype.titleFormat;
    /** @type {?} */
    FullCalendarComponent.prototype.titleRangeSeparator;
    /** @type {?} */
    FullCalendarComponent.prototype.defaultRangeSeparator;
    /** @type {?} */
    FullCalendarComponent.prototype.dir;
    /** @type {?} */
    FullCalendarComponent.prototype.defaultTimedEventDuration;
    /** @type {?} */
    FullCalendarComponent.prototype.defaultAllDayEventDuration;
    /** @type {?} */
    FullCalendarComponent.prototype.showNonCurrentDates;
    /** @type {?} */
    FullCalendarComponent.prototype.columnHeaderFormat;
    /** @type {?} */
    FullCalendarComponent.prototype.slotLabelFormat;
    /** @type {?} */
    FullCalendarComponent.prototype.columnHeaderText;
    /** @type {?} */
    FullCalendarComponent.prototype.nextDayThreshold;
    /** @type {?} */
    FullCalendarComponent.prototype.eventOrder;
    /** @type {?} */
    FullCalendarComponent.prototype.rerenderDelay;
    /** @type {?} */
    FullCalendarComponent.prototype.progressiveEventRendering;
    /** @type {?} */
    FullCalendarComponent.prototype.eventResizableFromStart;
    /** @type {?} */
    FullCalendarComponent.prototype.eventDragMinDistance;
    /** @type {?} */
    FullCalendarComponent.prototype.allDayMaintainDuration;
    /** @type {?} */
    FullCalendarComponent.prototype.listDayFormat;
    /** @type {?} */
    FullCalendarComponent.prototype.listDayAltFormat;
    /** @type {?} */
    FullCalendarComponent.prototype.onDateClick;
    /** @type {?} */
    FullCalendarComponent.prototype.onDrop;
    /** @type {?} */
    FullCalendarComponent.prototype.onEventClick;
    /** @type {?} */
    FullCalendarComponent.prototype.onEventMouseEnter;
    /** @type {?} */
    FullCalendarComponent.prototype.onEventMouseLeave;
    /** @type {?} */
    FullCalendarComponent.prototype.onEventDragStart;
    /** @type {?} */
    FullCalendarComponent.prototype.onEventDragStop;
    /** @type {?} */
    FullCalendarComponent.prototype.onEventDrop;
    /** @type {?} */
    FullCalendarComponent.prototype.onEventReceive;
    /** @type {?} */
    FullCalendarComponent.prototype.onEventResizeStart;
    /** @type {?} */
    FullCalendarComponent.prototype.onEventResizeStop;
    /** @type {?} */
    FullCalendarComponent.prototype.onEventResize;
    /** @type {?} */
    FullCalendarComponent.prototype.onDatesRender;
    /** @type {?} */
    FullCalendarComponent.prototype.onDatesDestroy;
    /** @type {?} */
    FullCalendarComponent.prototype.onViewSkeletonRender;
    /** @type {?} */
    FullCalendarComponent.prototype.onViewSkeletonDestroy;
    /** @type {?} */
    FullCalendarComponent.prototype.onNavLinkDayClick;
    /** @type {?} */
    FullCalendarComponent.prototype.onNavLinkWeekClick;
    /** @type {?} */
    FullCalendarComponent.prototype.onEventRender;
    /** @type {?} */
    FullCalendarComponent.prototype.onEventDestroy;
    /** @type {?} */
    FullCalendarComponent.prototype.onEventPositioned;
    /** @type {?} */
    FullCalendarComponent.prototype.onDayRender;
    /** @type {?} */
    FullCalendarComponent.prototype.onSelect;
    /** @type {?} */
    FullCalendarComponent.prototype.onUnselect;
    /** @type {?} */
    FullCalendarComponent.prototype.onResourceRender;
    /** @type {?} */
    FullCalendarComponent.prototype.calendar;
    /** @type {?} */
    FullCalendarComponent.prototype.initialized;
    /** @type {?} */
    FullCalendarComponent.prototype.eventDiffer;
    /** @type {?} */
    FullCalendarComponent.prototype.resourceDiffer;
    /** @type {?} */
    FullCalendarComponent.prototype.config;
    /**
     * @type {?}
     * @private
     */
    FullCalendarComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,