(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('fullcalendar'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-fullcalendar', ['exports', 'fullcalendar', '@angular/core'], factory) :
    (factory((global['ngx-fullcalendar'] = {}),global.fullcalendar,global.ng.core));
}(this, (function (exports,fullcalendar,core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // declare const FullCalendar: any;
    /** @type {?} */
    var defaultConfig = {
        aspectRatio: 1.35,
        defaultView: 'month',
        fixedWeekCount: true,
        showNonCurrentDates: true,
        allDaySlot: true,
        allDayText: 'all-day',
        slotDuration: '00:30:00',
        scrollTime: '06:00:00',
        minTime: '00:00:00',
        maxTime: '24:00:00',
        slotEventOverlap: true,
        dragRevertDuration: 500,
        dragOpacity: .75,
        dragScroll: true,
        timeZone: 'local',
        titleFormat: {
            year: 'numeric',
            month: 'long'
        },
        titleRangeSeparator: ' \u2013 ',
        defaultRangeSeparator: ' - ',
        dir: 'ltr',
        defaultTimedEventDuration: '01:00',
        defaultAllDayEventDuration: { days: 1 },
        eventOrder: 'start,-duration,allDay,title',
        rerenderDelay: null
    };
    var FullCalendarComponent = /** @class */ (function () {
        function FullCalendarComponent(el, differs) {
            this.el = el;
            // tslint:disable:no-output-on-prefix
            this.onDateClick = new core.EventEmitter();
            this.onDrop = new core.EventEmitter();
            this.onEventClick = new core.EventEmitter();
            this.onEventMouseEnter = new core.EventEmitter();
            this.onEventMouseLeave = new core.EventEmitter();
            this.onEventDragStart = new core.EventEmitter();
            this.onEventDragStop = new core.EventEmitter();
            this.onEventDrop = new core.EventEmitter();
            this.onEventReceive = new core.EventEmitter();
            this.onEventResizeStart = new core.EventEmitter();
            this.onEventResizeStop = new core.EventEmitter();
            this.onEventResize = new core.EventEmitter();
            this.onDatesRender = new core.EventEmitter();
            this.onDatesDestroy = new core.EventEmitter();
            this.onViewSkeletonRender = new core.EventEmitter();
            this.onViewSkeletonDestroy = new core.EventEmitter();
            this.onNavLinkDayClick = new core.EventEmitter();
            this.onNavLinkWeekClick = new core.EventEmitter();
            this.onEventRender = new core.EventEmitter();
            this.onEventDestroy = new core.EventEmitter();
            this.onEventPositioned = new core.EventEmitter();
            this.onDayRender = new core.EventEmitter();
            this.onSelect = new core.EventEmitter();
            this.onUnselect = new core.EventEmitter();
            this.onResourceRender = new core.EventEmitter();
            this.eventDiffer = differs.find([]).create(null);
            this.resourceDiffer = differs.find([]).create(null);
            this.initialized = false;
        }
        /**
         * @return {?}
         */
        FullCalendarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.config = this.safeGenerateConfig();
                this.config.resources = function (fetchInfo, successCallback, failureCallback) {
                    successCallback(_this.resources || []);
                };
                this.config.dateClick = function (dateClickInfo) {
                    _this.onDateClick.emit(dateClickInfo);
                };
                this.config.dayRender = function (dayRenderInfo) {
                    _this.onDayRender.emit(dayRenderInfo);
                };
                this.config.drop = function (dropInfo) {
                    _this.onDrop.emit(dropInfo);
                };
                this.config.eventClick = function (eventClickInfo) {
                    _this.onEventClick.emit(eventClickInfo);
                };
                this.config.eventMouseEnter = function (mouseEnterInfo) {
                    _this.onEventMouseEnter.emit(mouseEnterInfo);
                };
                this.config.eventMouseLeave = function (mouseLeaveInfo) {
                    _this.onEventMouseLeave.emit(mouseLeaveInfo);
                };
                this.config.eventDragStart = function (info) {
                    _this.onEventDragStart.emit(info);
                };
                this.config.eventDragStop = function (info) {
                    _this.onEventDragStop.emit(info);
                };
                this.config.eventDrop = function (eventDropInfo) {
                    _this._updateEvent(eventDropInfo.event);
                    _this.onEventDrop.emit(eventDropInfo);
                };
                this.config.eventReceive = function (info) {
                    _this.onEventReceive.emit(info);
                };
                this.config.eventResizeStart = function (info) {
                    _this.onEventResizeStart.emit(info);
                };
                this.config.eventResizeStop = function (info) {
                    _this.onEventResizeStop.emit(info);
                };
                this.config.eventResize = function (eventResizeInfo) {
                    _this._updateEvent(eventResizeInfo.event);
                    _this.onEventResize.emit(eventResizeInfo);
                };
                this.config.datesRender = function (info) {
                    _this.onDatesRender.emit({
                        'info': info
                    });
                };
                this.config.datesDestroy = function (info) {
                    _this.onDatesDestroy.emit({
                        'info': info
                    });
                };
                this.config.viewSkeletonRender = function (info) {
                    _this.onViewSkeletonRender.emit({
                        'info': info
                    });
                };
                this.config.viewSkeletonDestroy = function (info) {
                    _this.onViewSkeletonDestroy.emit({
                        'info': info
                    });
                };
                this.config.navLinkDayClick = function (date, jsEvent) {
                    _this.onNavLinkDayClick.emit({
                        'date': date,
                        'jsEvent': jsEvent
                    });
                };
                this.config.navLinkWeekClick = function (weekStart, jsEvent) {
                    _this.onNavLinkWeekClick.emit({
                        'weekStart': weekStart,
                        'jsEvent': jsEvent
                    });
                };
                this.config.eventRender = function (info) {
                    _this.onEventRender.emit(info);
                };
                this.config.eventDestroy = function (info) {
                    _this.onEventDestroy.emit(info);
                };
                this.config.eventPositioned = function (info) {
                    _this.onEventPositioned.emit(info);
                };
                this.config.select = function (selectionInfo) {
                    _this.onSelect.emit(selectionInfo);
                };
                this.config.unselect = function (jsEvent, view) {
                    _this.onUnselect.emit({
                        'jsEvent': jsEvent,
                        'view': view
                    });
                };
                this.config.resourceRender = function (renderInfo) {
                    _this.onResourceRender.emit(renderInfo);
                };
            };
        /**
         * @return {?}
         */
        FullCalendarComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.calendar) {
                    this.calendar.destroy();
                    this.initialized = false;
                    this.calendar = null;
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        FullCalendarComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this.calendar) {
                    for (var propName in changes) {
                        if (propName !== 'events') {
                            this.calendar.option(propName, changes[propName].currentValue);
                        }
                    }
                }
            };
        /**
         * @return {?}
         */
        FullCalendarComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                if (!this.initialized && this.el.nativeElement.offsetParent) {
                    this.initialize();
                }
            };
        /**
         * @return {?}
         */
        FullCalendarComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var eventChanges = this.eventDiffer.diff(this.events);
                if (this.calendar && eventChanges) {
                    this.calendar.removeEventSources();
                    if (this.events) {
                        this.calendar.addEventSource(this.events);
                    }
                }
                /** @type {?} */
                var resourceChanges = this.resourceDiffer.diff(this.resources);
                if (this.calendar && resourceChanges) {
                    this.calendar.refetchResources();
                }
            };
        /**
         * @private
         * @return {?}
         */
        FullCalendarComponent.prototype.initialize = /**
         * @private
         * @return {?}
         */
            function () {
                this.calendar = new fullcalendar.Calendar(this.el.nativeElement, this.config);
                this.calendar.render();
                if (!!this.draggableEl || !!this.containerEl) {
                    if (!!this.draggableEl) {
                        // tslint:disable-next-line:no-unused-expression
                        new fullcalendar.Draggable(this.draggableEl);
                    }
                    else if (this.containerEl) {
                        // tslint:disable-next-line:no-unused-expression
                        new fullcalendar.Draggable(this.containerEl, {
                            itemSelector: this.itemSelector
                        });
                    }
                }
                if (this.events) {
                    this.calendar.addEventSource(this.events);
                }
                this.initialized = true;
            };
        /**
         * @private
         * @return {?}
         */
        FullCalendarComponent.prototype.safeGenerateConfig = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var configFromAttrs = {
                    // tslint:disable:no-non-null-assertion
                    header: ( /** @type {?} */(this.header)),
                    weekends: ( /** @type {?} */(this.weekends)),
                    hiddenDays: ( /** @type {?} */(this.hiddenDays)),
                    fixedWeekCount: ( /** @type {?} */(this.fixedWeekCount)),
                    weekNumbers: ( /** @type {?} */(this.weekNumbers)),
                    businessHours: ( /** @type {?} */(this.businessHours)),
                    height: ( /** @type {?} */(this.height)),
                    contentHeight: ( /** @type {?} */(this.contentHeight)),
                    aspectRatio: ( /** @type {?} */(this.aspectRatio)),
                    eventLimit: ( /** @type {?} */(this.eventLimit)),
                    defaultDate: ( /** @type {?} */(this.defaultDate)),
                    locale: ( /** @type {?} */(this.locale)),
                    timeZone: ( /** @type {?} */(this.timeZone)),
                    eventTimeFormat: ( /** @type {?} */(this.eventTimeFormat)),
                    editable: ( /** @type {?} */(this.editable)),
                    droppable: ( /** @type {?} */(this.droppable)),
                    eventStartEditable: ( /** @type {?} */(this.eventStartEditable)),
                    eventDurationEditable: ( /** @type {?} */(this.eventDurationEditable)),
                    defaultView: ( /** @type {?} */(this.defaultView)),
                    allDaySlot: ( /** @type {?} */(this.allDaySlot)),
                    allDayText: ( /** @type {?} */(this.allDayText)),
                    slotDuration: ( /** @type {?} */(this.slotDuration)),
                    slotLabelInterval: ( /** @type {?} */(this.slotLabelInterval)),
                    snapDuration: ( /** @type {?} */(this.snapDuration)),
                    scrollTime: ( /** @type {?} */(this.scrollTime)),
                    minTime: ( /** @type {?} */(this.minTime)),
                    maxTime: ( /** @type {?} */(this.maxTime)),
                    slotEventOverlap: ( /** @type {?} */(this.slotEventOverlap)),
                    nowIndicator: ( /** @type {?} */(this.nowIndicator)),
                    dragRevertDuration: ( /** @type {?} */(this.dragRevertDuration)),
                    dragOpacity: ( /** @type {?} */(this.dragOpacity)),
                    dragScroll: ( /** @type {?} */(this.dragScroll)),
                    eventOverlap: ( /** @type {?} */(this.eventOverlap)),
                    eventConstraint: ( /** @type {?} */(this.eventConstraint)),
                    dayRender: ( /** @type {?} */(this.dayRender)),
                    navLinks: ( /** @type {?} */(this.navLinks)),
                    // new in v4
                    titleFormat: ( /** @type {?} */(this.titleFormat)),
                    titleRangeSeparator: ( /** @type {?} */(this.titleRangeSeparator)),
                    defaultRangeSeparator: ( /** @type {?} */(this.defaultRangeSeparator)),
                    dir: ( /** @type {?} */(this.dir)),
                    defaultTimedEventDuration: ( /** @type {?} */(this.defaultTimedEventDuration)),
                    defaultAllDayEventDuration: ( /** @type {?} */(this.defaultAllDayEventDuration)),
                    showNonCurrentDates: ( /** @type {?} */(this.showNonCurrentDates)),
                    columnHeaderFormat: ( /** @type {?} */(this.columnHeaderFormat)),
                    slotLabelFormat: ( /** @type {?} */(this.slotLabelFormat)),
                    columnHeaderText: ( /** @type {?} */(this.columnHeaderText)),
                    nextDayThreshold: ( /** @type {?} */(this.nextDayThreshold)),
                    eventOrder: ( /** @type {?} */(this.eventOrder)),
                    rerenderDelay: ( /** @type {?} */(this.rerenderDelay)),
                    progressiveEventRendering: ( /** @type {?} */(this.progressiveEventRendering)),
                    eventResizableFromStart: ( /** @type {?} */(this.eventResizableFromStart)),
                    eventDragMinDistance: ( /** @type {?} */(this.eventDragMinDistance)),
                    allDayMaintainDuration: ( /** @type {?} */(this.allDayMaintainDuration)),
                    listDayFormat: ( /** @type {?} */(this.listDayFormat)),
                    listDayAltFormat: ( /** @type {?} */(this.listDayAltFormat)),
                };
                return __assign({}, defaultConfig, this.removeUndefinedProperties(this.options), this.removeUndefinedProperties(configFromAttrs));
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        FullCalendarComponent.prototype._updateEvent = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                console.log(event);
                /** @type {?} */
                var sourceEvent = this._findEvent(event.id);
                if (sourceEvent) {
                    sourceEvent.start = fullcalendar.formatDate(event.start);
                    if (event.end) {
                        sourceEvent.end = fullcalendar.formatDate(event.end);
                    }
                    if (event.resourceId) {
                        sourceEvent.resourceId = event.resourceId;
                    }
                }
            };
        /**
         * @private
         * @param {?} id
         * @return {?}
         */
        FullCalendarComponent.prototype._findEvent = /**
         * @private
         * @param {?} id
         * @return {?}
         */
            function (id) {
                var e_1, _a;
                /** @type {?} */
                var event;
                if (this.events) {
                    try {
                        for (var _b = __values(this.events), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var e = _c.value;
                            if (e.id === id) {
                                event = e;
                                break;
                            }
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return))
                                _a.call(_b);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                return event;
            };
        /**
         * @template T
         * @param {?} object
         * @return {?}
         */
        FullCalendarComponent.prototype.removeUndefinedProperties = /**
         * @template T
         * @param {?} object
         * @return {?}
         */
            function (object) {
                return JSON.parse(JSON.stringify(typeof object === 'object' ? object : {}));
            };
        FullCalendarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-fullcalendar',
                        template: " "
                    }] }
        ];
        /** @nocollapse */
        FullCalendarComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.IterableDiffers }
            ];
        };
        FullCalendarComponent.propDecorators = {
            draggableEl: [{ type: core.Input }],
            containerEl: [{ type: core.Input }],
            itemSelector: [{ type: core.Input }],
            options: [{ type: core.Input }],
            events: [{ type: core.Input }],
            resources: [{ type: core.Input }],
            header: [{ type: core.Input }],
            weekends: [{ type: core.Input }],
            hiddenDays: [{ type: core.Input }],
            fixedWeekCount: [{ type: core.Input }],
            weekNumbers: [{ type: core.Input }],
            businessHours: [{ type: core.Input }],
            height: [{ type: core.Input }],
            contentHeight: [{ type: core.Input }],
            aspectRatio: [{ type: core.Input }],
            eventLimit: [{ type: core.Input }],
            defaultDate: [{ type: core.Input }],
            editable: [{ type: core.Input }],
            droppable: [{ type: core.Input }],
            eventStartEditable: [{ type: core.Input }],
            eventDurationEditable: [{ type: core.Input }],
            defaultView: [{ type: core.Input }],
            allDaySlot: [{ type: core.Input }],
            allDayText: [{ type: core.Input }],
            slotDuration: [{ type: core.Input }],
            slotLabelInterval: [{ type: core.Input }],
            snapDuration: [{ type: core.Input }],
            scrollTime: [{ type: core.Input }],
            minTime: [{ type: core.Input }],
            maxTime: [{ type: core.Input }],
            slotEventOverlap: [{ type: core.Input }],
            nowIndicator: [{ type: core.Input }],
            dragRevertDuration: [{ type: core.Input }],
            dragOpacity: [{ type: core.Input }],
            dragScroll: [{ type: core.Input }],
            eventOverlap: [{ type: core.Input }],
            eventConstraint: [{ type: core.Input }],
            locale: [{ type: core.Input }],
            timeZone: [{ type: core.Input }],
            eventTimeFormat: [{ type: core.Input }],
            dayRender: [{ type: core.Input }],
            navLinks: [{ type: core.Input }],
            titleFormat: [{ type: core.Input }],
            titleRangeSeparator: [{ type: core.Input }],
            defaultRangeSeparator: [{ type: core.Input }],
            dir: [{ type: core.Input }],
            defaultTimedEventDuration: [{ type: core.Input }],
            defaultAllDayEventDuration: [{ type: core.Input }],
            showNonCurrentDates: [{ type: core.Input }],
            columnHeaderFormat: [{ type: core.Input }],
            slotLabelFormat: [{ type: core.Input }],
            columnHeaderText: [{ type: core.Input }],
            nextDayThreshold: [{ type: core.Input }],
            eventOrder: [{ type: core.Input }],
            rerenderDelay: [{ type: core.Input }],
            progressiveEventRendering: [{ type: core.Input }],
            eventResizableFromStart: [{ type: core.Input }],
            eventDragMinDistance: [{ type: core.Input }],
            allDayMaintainDuration: [{ type: core.Input }],
            listDayFormat: [{ type: core.Input }],
            listDayAltFormat: [{ type: core.Input }],
            onDateClick: [{ type: core.Output }],
            onDrop: [{ type: core.Output }],
            onEventClick: [{ type: core.Output }],
            onEventMouseEnter: [{ type: core.Output }],
            onEventMouseLeave: [{ type: core.Output }],
            onEventDragStart: [{ type: core.Output }],
            onEventDragStop: [{ type: core.Output }],
            onEventDrop: [{ type: core.Output }],
            onEventReceive: [{ type: core.Output }],
            onEventResizeStart: [{ type: core.Output }],
            onEventResizeStop: [{ type: core.Output }],
            onEventResize: [{ type: core.Output }],
            onDatesRender: [{ type: core.Output }],
            onDatesDestroy: [{ type: core.Output }],
            onViewSkeletonRender: [{ type: core.Output }],
            onViewSkeletonDestroy: [{ type: core.Output }],
            onNavLinkDayClick: [{ type: core.Output }],
            onNavLinkWeekClick: [{ type: core.Output }],
            onEventRender: [{ type: core.Output }],
            onEventDestroy: [{ type: core.Output }],
            onEventPositioned: [{ type: core.Output }],
            onDayRender: [{ type: core.Output }],
            onSelect: [{ type: core.Output }],
            onUnselect: [{ type: core.Output }],
            onResourceRender: [{ type: core.Output }]
        };
        return FullCalendarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxFullCalendarModule = /** @class */ (function () {
        function NgxFullCalendarModule() {
        }
        NgxFullCalendarModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            FullCalendarComponent
                        ],
                        imports: [],
                        exports: [
                            FullCalendarComponent
                        ]
                    },] }
        ];
        return NgxFullCalendarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxFullCalendarModule = NgxFullCalendarModule;
    exports.FullCalendarComponent = FullCalendarComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-fullcalendar.umd.js.map